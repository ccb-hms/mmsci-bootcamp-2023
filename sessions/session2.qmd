---
title: "Session 2: Manipulating Biological Data"
format: html
---

# Data

```{r}
## load the tidyverse packages
library("tidyverse")
rna <- read_csv("../data/rnaseq.csv")
```

# Reshaping Data

In the `rna` tibble, the rows contain expression values (the unit) that are
associated with a combination of 2 other variables: `gene` and `sample`.

All the other columns correspond to variables describing either
the sample (organism, age, sex, ...) or the gene (gene\_biotype, ENTREZ\_ID, product, ...).
The variables that don't change with genes or with samples will have the same value in all the rows.

```{r}
rna %>%
  arrange(gene)
```

This structure is called a `long-format`, as one column contains all the values,
and other column(s) list(s) the context of the value.

In certain cases, the `long-format` is not really "human-readable", and another format,
a `wide-format` is preferred, as a more compact way of representing the data.
This is typically the case with gene expression values that scientists are used to
look as matrices, were rows represent genes and columns represent samples.

In this format, it would therefore become straightforward
to explore the relationship between the gene expression levels within, and
between, the samples.

```{r, echo=FALSE}
rna %>%
  select(gene, sample, expression) %>%
  pivot_wider(names_from = sample,
              values_from = expression)
```

To convert the gene expression values from `rna` into a wide-format,
we need to create a new table where the values of the `sample` column would
become the names of column variables.

The key point here is that we are still following
a tidy data structure, but we have **reshaped** the data according to
the observations of interest: expression levels per gene instead
of recording them per gene and per sample.

The opposite transformation would be to transform column names into
values of a new variable.

We can do both these of transformations with two `tidyr` functions,
`pivot_longer()` and `pivot_wider()` (see
[here](https://tidyr.tidyverse.org/dev/articles/pivot.html) for
details).

### Pivoting the data into a wider format

Let's select the first 3 columns of `rna` and use `pivot_wider()`
to transform the data into a wide-format.

```{r, purl=TRUE}
rna_exp <- rna %>%
  select(gene, sample, expression)
rna_exp
```

`pivot_wider` takes three main arguments:

1. the data to be transformed;
2. the `names_from` : the column whose values will become new column
  names;
3. the `values_from`: the column whose values will fill the new
  columns.

```{r, fig.cap="Wide pivot of the `rna` data.", echo=FALSE, message=FALSE}
knitr::include_graphics("../img/pivot_wider.png")
```

```{r, purl=TRUE}
rna_wide <- rna_exp %>%
  pivot_wider(names_from = sample,
              values_from = expression)
rna_wide
```

Note that by default, the `pivot_wider()` function will add `NA` for missing values.

Let's imagine that for some reason, we had some missing expression values for some
genes in certain samples. In the following fictive example, the gene Cyp2d22 has only
one expression value, in GSM2545338 sample.

```{r, purl=TRUE, echo=FALSE}
rna_with_missing_values <- rna %>%
  select(gene, sample, expression) %>%
  filter(gene %in% c("Asl", "Apod", "Cyp2d22")) %>%
  filter(sample %in% c("GSM2545336", "GSM2545337", "GSM2545338")) %>%
  arrange(sample) %>%
  filter(!(gene == "Cyp2d22" & sample != "GSM2545338"))
```

```{r, purl=TRUE}
rna_with_missing_values
```

By default, the `pivot_wider()` function will add `NA` for missing
values. This can be parameterised with the `values_fill` argument of
the `pivot_wider()` function.

```{r, purl=TRUE}
rna_with_missing_values %>%
  pivot_wider(names_from = sample,
              values_from = expression)

rna_with_missing_values %>%
  pivot_wider(names_from = sample,
              values_from = expression,
              values_fill = 0)
```

### Pivoting data into a longer format

In the opposite situation we are using the column names and turning them into
a pair of new variables. One variable represents the column names as
values, and the other variable contains the values previously
associated with the column names.

`pivot_longer()` takes four main arguments:

1. the data to be transformed;
2. the `names_to`: the new column name we wish to create and populate with the
  current column names;
3. the `values_to`: the new column name we wish to create and populate with
  current values;
4. the names of the columns to be used to populate the `names_to` and
  `values_to` variables (or to drop).

```{r, fig.cap="Long pivot of the `rna` data.", echo=FALSE, message=FALSE}
knitr::include_graphics("../img/pivot_longer.png")
```

To recreate `rna_long` from `rna_wide` we would create a key
called `sample` and value called `expression` and use all columns
except `gene` for the key variable. Here we drop `gene` column
with a minus sign.

Notice how the new variable names are to be quoted here.

```{r}
rna_long <- rna_wide %>%
    pivot_longer(names_to = "sample",
                 values_to = "expression",
                 -gene)
rna_long
```

We could also have used a specification for what columns to
include. This can be useful if you have a large number of identifying
columns, and it's easier to specify what to gather than what to leave
alone. Here the `starts_with()` function can help to retrieve sample
names without having to list them all!
Another possibility would be to use the `:` operator!

```{r}
rna_wide %>%
    pivot_longer(names_to = "sample",
                 values_to = "expression",
                 cols = starts_with("GSM"))
rna_wide %>%
    pivot_longer(names_to = "sample",
                 values_to = "expression",
                 GSM2545336:GSM2545380)
```

Note that if we had missing values in the wide-format, the `NA` would be
included in the new long format.

Remember our previous fictive tibble containing missing values:

```{r}
rna_with_missing_values

wide_with_NA <- rna_with_missing_values %>%
  pivot_wider(names_from = sample,
              values_from = expression)
wide_with_NA

wide_with_NA %>%
    pivot_longer(names_to = "sample",
                 values_to = "expression",
                 -gene)
```

Pivoting to wider and longer formats can be a useful way to balance out a dataset
so every replicate has the same composition.

::: {.callout-note icon=false}

## Question

Starting from the rna table, use the `pivot_wider()` function to create
a wide-format table giving the gene expression levels in each mouse.
Then use the `pivot_longer()` function to restore a long-format table.

:::

::: {.callout-tip icon=false collapse=true}

## Solution

```{r, answer=TRUE, purl=TRUE}
rna1 <- rna %>%
select(gene, mouse, expression) %>%
pivot_wider(names_from = mouse, values_from = expression)
rna1

rna1 %>%
pivot_longer(names_to = "mouse_id", values_to = "counts", -gene)
```

:::

::: {.callout-note icon=false}

## Question

Subset genes located on X and Y chromosomes from the `rna` data frame and
spread the data frame with `sex` as columns, `chromosome_name` as
rows, and the mean expression of genes located in each chromosome as the values,
as in the following tibble:

```{r, echo=FALSE, message=FALSE}
knitr::include_graphics("../img/Exercise_pivot_W.png")
```

You will need to summarise before reshaping!

:::

::: {.callout-tip icon=false collapse=true}

## Solution

Let's first calculate the mean expression level of X and Y linked genes from
male and female samples...

```{r}
 rna %>%
  filter(chromosome_name == "Y" | chromosome_name == "X") %>%
  group_by(sex, chromosome_name) %>%
  summarise(mean = mean(expression))
```

And pivot the table to wide format

```{r, answer=TRUE, purl=TRUE}
rna_1 <- rna %>%
  filter(chromosome_name == "Y" | chromosome_name == "X") %>%
  group_by(sex, chromosome_name) %>%
  summarise(mean = mean(expression)) %>%
  pivot_wider(names_from = sex,
              values_from = mean)

rna_1
```

Now take that data frame and transform it with `pivot_longer()` so
each row is a unique `chromosome_name` by `gender` combination.

```{r, answer=TRUE, purl=TRUE}
rna_1 %>%
  pivot_longer(names_to = "gender",
               values_to = "mean",
               -chromosome_name)

```

:::

::: {.callout-note icon=false}

## Question

Use the `rna` dataset to create an expression matrix where each row
represents the mean expression levels of genes and columns represent
the different timepoints.

:::

::: {.callout-tip icon=false collapse=true}

## Solution

Let's first calculate the mean expression by gene and by time

```{r}
rna %>%
  group_by(gene, time) %>%
  summarise(mean_exp = mean(expression))
```

before using the pivot\_wider() function

```{r}
rna_time <- rna %>%
  group_by(gene, time) %>%
  summarise(mean_exp = mean(expression)) %>%
  pivot_wider(names_from = time,
              values_from = mean_exp)
rna_time
```

Notice that this generates a tibble with some column names starting by a number.
If we wanted to select the column corresponding to the timepoints,
we could not use the column names directly... What happens when we select the column 4?

```{r}
rna %>%
  group_by(gene, time) %>%
  summarise(mean_exp = mean(expression)) %>%
  pivot_wider(names_from = time,
              values_from = mean_exp) %>%
  select(gene, 4)
```

To select the timepoint 4, we would have to quote the column name, with backticks "\`"

```{r}
rna %>%
  group_by(gene, time) %>%
  summarise(mean_exp = mean(expression)) %>%
  pivot_wider(names_from = time,
              values_from = mean_exp) %>%
  select(gene, `4`)
```

Another possibility would be to rename the column,
choosing a name that doesn't start by a number :

```{r}
rna %>%
  group_by(gene, time) %>%
  summarise(mean_exp = mean(expression)) %>%
  pivot_wider(names_from = time,
              values_from = mean_exp) %>%
  rename("time0" = `0`, "time4" = `4`, "time8" = `8`) %>%
  select(gene, time4)
```


:::

::: {.callout-note icon=false}

## Question

Use the previous data frame containing mean expression levels per timepoint and create
a new column containing fold-changes between timepoint 8 and timepoint 0, and fold-changes
between timepoint 8 and timepoint 4.
Convert this table into a long-format table gathering the fold-changes calculated.

:::

::: {.callout-tip icon=false collapse=true}

## Solution

Starting from the rna\_time tibble:

```{r}
rna_time
```

Calculate fold-changes:

```{r}
rna_time %>%
  mutate(time_8_vs_0 = `8` / `0`, time_8_vs_4 = `8` / `4`)
```

And use the pivot\_longer() function:

```{r}
rna_time %>%
  mutate(time_8_vs_0 = `8` / `0`, time_8_vs_4 = `8` / `4`) %>%
  pivot_longer(names_to = "comparisons",
               values_to = "Fold_changes",
               time_8_vs_0:time_8_vs_4)
```

:::

# Joining

In many real life situations, data are spread across multiple tables.
Usually this occurs because different types of information are
collected from different sources.

It may be desirable for some analyses to combine data from two or more
tables into a single data frame based on a column that would be common
to all the tables.

The `dplyr` package provides a set of join functions for combining two
data frames based on matches within specified columns. Here, we
provide a short introduction to joins. The
[Data Transformation Cheat
Sheet](https://github.com/rstudio/cheatsheets/raw/master/data-transformation.pdf)
also provides a short overview on table joins.

We are going to illustrate join using a small table, `rna_mini` that
we will create by subsetting the original `rna` table, keeping only 3
columns and 10 lines.

```{r}
rna_mini <- rna %>%
   select(gene, sample, expression) %>%
   head(10)
rna_mini
```

The second table, `annot1`, contains 2 columns, gene and
gene\_description.

```{r, message=FALSE}
annot1 <- read_csv(file = "../data/annot1.csv")
annot1
```

We now want to join these two tables into a single one containing all
variables using the `full_join()` function from the `dplyr` package. The
function will automatically find the common variable to match columns
from the first and second table.  In this case, `gene` is the common
variable. Such variables are called keys. Keys are used to match
observations across different tables.

```{r}
full_join(rna_mini, annot1)
```

In real life, gene annotations are sometimes labelled differently.

The `annot2` table is exactly the same than `annot1` except that the
variable containing gene names is labelled differently. 

```{r, message=FALSE}
annot2 <- read_csv(file = "../data/annot2.csv")
```

In case none of the variable names match, we can set manually the
variables to use for the matching.  These variables can be set using
the `by` argument, as shown below with `rna_mini` and `annot2` tables.

```{r}
full_join(rna_mini, annot2, by = c("gene" = "external_gene_name"))
```

As can be seen above, the variable name of the first table is retained
in the joined one.

::: {.callout-note icon=false}

## Challenge:

Load in the file `annot3.csv`. Using the `full_join()`
function, join tables `rna_mini` and `annot3`. What has happened for
genes *Klk6*, *mt-Tf*, *mt-Rnr1*, *mt-Tv*, *mt-Rnr2*, and *mt-Tl1* ?

:::

::: {.callout-tip icon=false collapse=true}

## Solution

```{r, message=FALSE}
annot3 <- read_csv("../data/annot3.csv")
full_join(rna_mini, annot3)
```

Genes *Klk6* is only present in `rna_mini`, while genes *mt-Tf*, *mt-Rnr1*, *mt-Tv*,
*mt-Rnr2*, and *mt-Tl1* are only present in `annot3` table. Their respective values for the
variables of the table have been encoded as missing.

:::

# Genomic Ranges

This section introduces two useful packages for general-purpose work on genomic coordinates. The [rtracklayer][] package provides the `import()` function to read many types of genomic files (e.g., BED, GTF, VCF, FASTA) into _Bioconductor_ objects. The [GenomicRanges][] package provides functions for manipulating genomic ranges, i.e., descriptions of exons, genes, ChIP peaks, called variants, ... as coordinates in genome space.

```{r, fig.cap="Genomic Ranges objects in R.", echo=FALSE, message=FALSE}
knitr::include_graphics("../img/granges.png")
```

We start by attaching the [rtracklayer][] and [GenomicRanges][] packages to our session.

```{r, message=FALSE}
library(rtracklayer)
library(GenomicRanges)
```

## *GRanges*: Genomic Ranges

The central genomic data structure is the `GRanges` class, 
which represents a collection of genomic ranges
that each have a single start and end location on the genome. It can be
used to store the location of genomic features such as binding
sites, read alignments and transcripts. 

## Constructing a *GRanges* object from data.frame

Let's read in a text file in [BED format][]. The file contains the coordinates of
regions of recurrent somatic copy number alteration in the
[TCGA ovarian cancer cohort](https://www.nature.com/articles/nature10166).

We use `file.choose()` to find the file on our file system:

```{r, eval = FALSE}
fname <- file.choose()   # TCGA.OVC.GISTIC2.SCNAs.hg19.bed
```

```{r, echo = FALSE}
fname <- "../data/TCGA.OVC.GISTIC2.SCNAs.hg19.bed"
```

```{r}
fname
file.exists(fname)
```

and read it into an R `data.frame`.

```{r}
df <- read.delim(fname, header = FALSE)
head(df) 
colnames(df) <- c("seqnames", "start", "end", "type")
head(df) 
```

If we have a `data.frame` containing genomic coordinates with additional annotation
(here: integer copy number state), 
we can call `makeGRangesFromDataFrame()` to promote the `data.frame` to a `GRanges`.

This adds semantics, formal constraints, and range-specific functionality.


```{r example-GRanges}
gr <- makeGRangesFromDataFrame(df, keep.extra.columns = TRUE)
gr
```

creates a `GRanges` object with 70 genomic ranges, each corresponding to a region
of recurrent somatic copy number alteration in the 
[TCGA ovarian cancer cohort](https://www.nature.com/articles/nature10166).

The output is separated by `|` symbols: 
the genomic coordinates (seqnames, ranges, and strand) are located on the 
left and the metadata columns (here: alteration type) are located on the right. 

For this example, the metadata is comprised of `"type"`, 
but almost anything can be stored in the metadata portion of a `GRanges`
object.


We can understand a `GRanges` as a specific `data.frame` that stores
genomic coordinates. As such, we are able to seamlessly convert a `data.frame` 
to a `GRanges` (and vice versa), i.e. we can also easily turn a `GRanges` back into an
ordinary `data.frame`:

```{r}
df <- as.data.frame(gr)
head(df)
```

## Loading a *GRanges* object from a standard file format

We often obtain data on genomic ranges from standard track formats, like [BED format][]. 
The 
[rtracklayer](http://bioconductor.org/packages/rtracklayer) 
package parses those files directly into `GRanges` objects. 


Then use `import()` from [rtracklayer][] to read the data into _R_.
The result is again a `GRanges` object describing each copy number alteration.

```{r}
scna <- import(fname, genome = "hg19", extraCols = c(type = "character"))
scna
```


**Working with genomic ranges**

There are two parts to a `GenomicRanges` object. The `seqnames` (chromosomes, in the present case), start and end coordinates, and strand are _required_. Additional elements such as `name` in the current example are optional.
Required components are accessed by functions such as `start()`, `end()` and `width()`. Optional components can be accessed using the `$` notation.

```{r}
head( start(scna) )
head( scna$type )
```

Use the `width()` accessor function to extract a vector of widths for `scrna`. Transform the values using `log10()`, and visualize the distribution using `hist()`.

```{r}
hist(log10(width(scna)))
```

Use `subset()` to select the mutations on chromosomes 1 and 2.

```{r}
subset(scna, seqnames %in% c("chr1", "chr2"))
```

**Genomic annotations**

In Bioconductor there are a number of 'Annotation data' packages. An example is the TxDb family of packages. These packages contain information on the genomic coordinates of exons, genes, transcripts, etc. Attach the TxDb package corresponding to the _Homo sapiens_ hg19 genome build using the UCSC 'knownGene' track.

```{r, message=FALSE}
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
```

Extract the coordinates of all genes

```{r, message = FALSE}
gn <- genes(TxDb.Hsapiens.UCSC.hg19.knownGene)
gn
gn <- sort(gn)
gn
```

**Overlaps**

A very useful operation is to count overlaps in two distinct genomic ranges objects. The following counts the number of copy number alterations that overlap each gene. 

```{r}
olaps <- countOverlaps(gn, scna)
length(olaps)     # 1 count per gene
table(olaps)
```

Calculations such as `countOverlaps()` can be added to the `GRanges` object, tightly coupling derived data with the original annotation.

```{r}
gn$scnaOverlaps <- countOverlaps(gn, scna)
gn
```

It is then possible to perform coordinated actions, e.g., subsetting the `GRanges` objects for genes satisfying particular conditions, in a coordinated fashion where the software does all the book-keeping to makes sure the correct ranges are selected.

```{r}
subset(gn, scnaOverlaps > 0)
```

Can you think of other situations where one might want to calculate overlaps and couple these with `GRanges`?

**Exercise**

What is the maximum number of exons per transcript on chromosome 1 of the hg38 
genome assembly?

Hints:

1. The `exons` function extracts exon coordinates from a TxDb object. 
2. The `exons` function has an argument `columns` that can be used to obtain the
transcript ID (`tx_id`) and/or transcript name (`tx_name`) for each exon.

```{r}
# Solution 1: answering the question  
# " what is the maximum number of exons **annotated** to a transcript
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
ex <- exons(TxDb.Hsapiens.UCSC.hg38.knownGene, columns="tx_name")

ex.chr1 <- subset(ex, seqnames == "chr1")
tab <- table(unlist(ex.chr1$tx_name))
max(tab)
```

```{r}
# ENST00000698833.1 (NBPF20-202) has 143 exons annotated to it, in agreement with ENSEMBL genome browser
# https://useast.ensembl.org/Homo_sapiens/Transcript/Summary?db=core;g=ENSG00000162825;r=1:145290005-145425603;t=ENST00000698833
head( sort(tab, decreasing=TRUE) )
```

```{r}
# Solution 2 : answering the question 
# "what is the maximum number of exons **overlapping** a transcript"

tx <- transcripts(TxDb.Hsapiens.UCSC.hg38.knownGene)
tx.chr1 <- subset(tx, seqnames == "chr1")
olps <- countOverlaps(tx.chr1 , ex.chr1)
names(olps) <- tx.chr1$tx_name
head( sort(olps, decreasing=TRUE) )

tab["ENST00000645057.1"]
```

Perhaps the simplest overlap-based operation is `subsetByOverlaps()`,
which extracts the elements in the query (the first argument) that
overlap at least one element in the subject (the second).

```{r subsetByOverlaps}
subsetByOverlaps(gn, scna)
```

In every call to an overlap operation in two sets of _stranded_ genomic ranges,
it is necessary to specify `ignore.strand = TRUE`, except in rare cases when we
do not want ranges on opposite strands to be considered overlapping.

**Exercise**

We consider the collection of CpG islands in the human genome described
in [Wu et al., 2010](https://doi.org/10.1093/biostatistics/kxq005). 
Let's import the collection of CpG islands from
[here](http://www.haowulab.org/software/makeCGI/model-based-cpg-islands-hg19.txt)
as a `GRanges`. 

```{r}
cpg <- read.delim("http://www.haowulab.org/software/makeCGI/model-based-cpg-islands-hg19.txt")
cpg <- makeGRangesFromDataFrame(cpg, keep.extra.columns = TRUE)
genome(cpg) <- "hg19"
cpg <- sort(cpg)
cpg
```

We also will need the set of promotor regions in *hg19*

```{r}
proms <- rtracklayer::import("../data/hg19proms.bed")
genome(proms) <- "hg19"
proms
```


1. Determine the percentage of promoters on chromosome 21 that overlap with at least one CpG island.

```{r}
chr21.cpg <- subset(cpg, seqnames == "chr21")
chr21.proms <- subset(proms, seqnames == "chr21")
olaps <- countOverlaps(chr21.proms, chr21.cpg)
head(olaps) # Preview the beginning of the data

sum(olaps > 0) / length(olaps) * 100 
```

2. For those promoters that overlap with CpG islands, annotate the number of overlapping CpG islands as an additional column. What is the maximum number of overlapping CpG islands for one promoter at a time?

```{r}
# just number of overlapping islands
chr21.proms.with.cpg <- subsetByOverlaps(chr21.proms, chr21.cpg)
chr21.proms.with.cpg$nr.cpg <- olaps[olaps > 0]
chr21.proms.with.cpg
```

```{r}
max(chr21.proms.with.cpg$nr.cpg)
```

```{r}
# transfer the CpGcount column
olps <- findOverlaps(chr21.proms, chr21.cpg)
joined.proms.chr21 <- chr21.proms[queryHits(olps)]
joined.proms.chr21$CpGcount <- chr21.cpg[subjectHits(olps)]$CpGcount
max(joined.proms.chr21$CpGcount)
```

# Accessing genomic annotations

```{r}
rpkm_data <- read.csv("../data/counts.rpkm")
metadata <- read.csv(file="../data/mouse_exp_design.csv")
```

Let's convert these ensembl ID's into gene symbols. There are a number of ways to do this in R, but we will be using the `biomaRt` package. [BiomaRt](https://useast.ensembl.org/info/data/biomart/biomart_r_package.html) lets us easily map a variety of biological identifiers and choose a data source or 'mart'. We can see a list of available dataset.

```{r}
library(biomaRt, quietly = TRUE)
listEnsembl()
# For a reproducible analysis, it's good to always specify versions of databases
ensembl = useEnsembl(biomart="ensembl",version=109)
listDatasets(ensembl)[100:110,]
```

We want to convert ensembl gene ID's into MGI gene symbols. We can use the `getBM` function to get a dataframe of our mapped identifiers.

```{r}
ensembl = useEnsembl(biomart="ensembl", dataset="mmusculus_gene_ensembl")
gene_map <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","mgi_symbol"), values = rownames(rpkm_data), mart=ensembl)
```


1.  Try to replace the current rownames in `rpkm_data` with their mapped gene symbol. You may need to add a new column with the data instead.

2.  Use the `match()` function to subset the `metadata` data frame so that the row names of the `metadata` data frame match the column names of the \`rpkm_data\`\` data frame.

```{r}
#1
ind <- match(rownames(rpkm_data), gene_map$ensembl_gene_id)
# rownames(rpkm_data) <- gene_map$mgi_symbol[ind] #oh no! duplicate rownames
rpkm_data$gene <- gene_map$mgi_symbol[ind]

#2
idx <- match(colnames(rpkm_data), rownames(metadata))
metadata[idx, ]
```

We can use the `listAttributes()` and `listFilters()` functions to see what other information we can get using `getBM`. 

Let's use `getBM` to find all genes on chromosomes 2, 6, or  and create another dataframe only containing these genes.

```{r}
#Get the chomosome annotations
chrom_map <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","chromosome_name"), values = rownames(rpkm_data), mart=ensembl)

#not strictly needed, but let's make chromosome a factor
chrom_map$chromosome_name <- factor(chrom_map$chromosome_name)

#We could either first map to rpkm_data and then filter, or filter chrom_map and then map to rpkm_data. Let's do the latter. 
chrom_map_269 <- chrom_map[chrom_map$chromosome_name %in% c("2","6","9"),]
rpkm_chrom29 <- rpkm_data[rownames(rpkm_data) %in% chrom_map_269$ensembl_gene_id,]
```
